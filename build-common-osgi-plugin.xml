<?xml version="1.0"?>
<!DOCTYPE project>

<project name="build-common-osgi-plugin" xmlns:antelope="antlib:ise.antelope.tasks">
	<import file="build-common-plugin.xml" />

	<antelope:stringutil string="${plugin.file}" property="plugin.file">
		<antelope:replace regex="\.war" replacement="\.jar" />
	</antelope:stringutil>

	<if>
		<available file="src" />
		<then>
			<property name="osgi.plugin.classes.dir" value="classes" />
			<property name="osgi.plugin.source.dir" value="src" />
		</then>
		<else>
			<property name="osgi.plugin.classes.dir" value="docroot/WEB-INF/classes" />
			<property name="osgi.plugin.source.dir" value="docroot/WEB-INF/src" />
		</else>
	</if>

	<property name="plugin-lib.classpath.path" refid="plugin-lib.classpath" />

	<path id="plugin-lib.classpath">
		<path refid="portal.classpath" />
		<fileset dir="lib" erroronmissingdir="false" includes="*.jar" />
		<pathelement path="${plugin-lib.classpath.path}" />
	</path>

	<var name="plugin-lib.classpath.path" unset="true" />

	<taskdef classpathref="portal.classpath" resource="aQute/bnd/ant/taskdef.properties" />

	<macrodef name="manifest-helper">
		<attribute name="analyze" default="false" />

		<sequential>
			<taskdef
				classname="com.liferay.util.ant.ManifestHelperTask"
				classpathref="plugin.classpath"
				name="liferay-manifest-helper"
			/>

			<liferay-manifest-helper
				analyze="@{analyze}"
				classpathref="plugin.classpath"
				projectDirPropertyName="sdk.dir"
			/>
		</sequential>
	</macrodef>

	<target name="build-service">
		<mkdir dir="classes" />
		<mkdir dir="lib" />
		<mkdir dir="service" />
		<mkdir dir="sql" />
		<mkdir dir="src" />

		<copy todir="classes">
			<fileset dir="src" excludes="**/*.java" />
		</copy>

		<path id="service.classpath">
			<path refid="lib.classpath" />
			<path refid="portal.classpath" />
			<fileset dir="${app.server.lib.portal.dir}" includes="commons-digester.jar,commons-lang.jar,easyconf.jar" />
			<fileset dir="lib" includes="*.jar" />
			<pathelement location="classes" />
		</path>

		<if>
			<os family="windows" />
			<then>
				<classpath-to-jar
					classpathref="service.classpath"
					jarfile="build-service-classpath.jar"
				/>
			</then>
		</if>


		<property name="service.input.file" value="${basedir}/service.xml" />


		<java
			classname="com.liferay.portal.tools.servicebuilder.ServiceBuilder"
			classpathref="service.classpath"
			fork="true"
			newenvironment="true"
			outputproperty="build-service.output"
		>
			<jvmarg value="-Xms512m" />
			<jvmarg value="-Xmx1024m" />
			<jvmarg value="-Xss2048k" />
			<jvmarg value="-XX:MaxPermSize=512m" />
			<arg value="-Dexternal-properties=com/liferay/portal/tools/dependencies/portal-tools.properties" />
			<arg value="-Dorg.apache.commons.logging.Log=org.apache.commons.logging.impl.Log4JLogger" />
			<arg value="service.input.file=${service.input.file}" />
			<arg value="service.hbm.file=${basedir}/src/META-INF/portlet-hbm.xml" />
			<arg value="service.orm.file=${basedir}/src/META-INF/portlet-orm.xml" />
			<arg value="service.model.hints.file=${basedir}/src/META-INF/portlet-model-hints.xml" />
			<arg value="service.spring.file=${basedir}/src/META-INF/portlet-spring.xml" />
			<arg value="service.spring.base.file=${basedir}/src/META-INF/base-spring.xml" />
			<arg value="service.spring.cluster.file=${basedir}/src/META-INF/cluster-spring.xml" />
			<arg value="service.spring.dynamic.data.source.file=${basedir}/src/META-INF/dynamic-data-source-spring.xml" />
			<arg value="service.spring.hibernate.file=${basedir}/src/META-INF/hibernate-spring.xml" />
			<arg value="service.spring.infrastructure.file=${basedir}/src/META-INF/infrastructure-spring.xml" />
			<arg value="service.spring.shard.data.source.file=${basedir}/src/META-INF/shard-data-source-spring.xml" />
			<arg value="service.api.dir=${basedir}/service" />
			<arg value="service.impl.dir=${basedir}/src" />
			<arg value="service.json.file=${basedir}/docroot/js/service.js" />
			<arg value="service.sql.dir=${basedir}/sql" />
			<arg value="service.sql.file=tables.sql" />
			<arg value="service.sql.indexes.file=indexes.sql" />
			<arg value="service.sql.indexes.properties.file=indexes.properties" />
			<arg value="service.sql.sequences.file=sequences.sql" />
			<arg value="service.auto.namespace.tables=true" />
			<arg value="service.bean.locator.util=com.liferay.util.bean.PortletBeanLocatorUtil" />
			<arg value="service.props.util=com.liferay.util.service.ServiceProps" />
			<arg value="service.plugin.name=${plugin.name}" />
			<arg value="service.target.entity.name=${service.target.entity.name}" />
		</java>

		<if>
			<os family="windows" />
			<then>
				<delete file="build-service-classpath.jar" />
			</then>
		</if>

		<delete file="ServiceBuilder.temp" />

		<echo>${build-service.output}</echo>

		<if>
			<contains string="${build-service.output}" substring="Error" />
			<then>
				<fail>Service Builder generated exceptions.</fail>
			</then>
		</if>

		<mkdir dir="service-classes" />

		<path id="service.classpath">
			<path refid="lib.classpath" />
			<fileset dir="${app.server.lib.global.dir}" includes="*.jar" />
			<fileset dir="lib" excludes="${plugin.name}-service.jar" includes="*.jar" />
		</path>

		<antcall target="compile-java">
			<param name="javac.classpathref" value="service.classpath" />
			<param name="javac.destdir" value="service-classes" />
			<param name="javac.srcdir" value="service" />
			<reference refid="service.classpath" torefid="service.classpath" />
		</antcall>

		<jar
			basedir="service-classes"
			destfile="lib/${plugin.name}-service.jar"
		/>

		<delete dir="service-classes" />
	</target>

	<target name="clean">
		<delete dir="${osgi.plugin.classes.dir}" />

		<antcall target="build-common-plugin.clean" />
	</target>

	<target name="compile">
		<antcall target="compile-import-shared" />

		<mkdir dir="${osgi.plugin.classes.dir}" />

		<copy todir="${osgi.plugin.classes.dir}">
			<fileset dir="${osgi.plugin.source.dir}" excludes="**/*.java" />
		</copy>

		<antcall target="compile-java">
			<param name="javac.classpathref" value="plugin.classpath" />
			<param name="javac.destdir" value="${osgi.plugin.classes.dir}" />
			<param name="javac.srcdir" value="${osgi.plugin.source.dir}" />
		</antcall>
	</target>

	<target name="deploy" depends="jar,deploy-dependencies">
		<copy file="${plugin.file}" todir="${auto.deploy.dir}" />
	</target>

	<target name="deploy-dependencies">
		<copy failonerror="false" todir="${auto.deploy.dir}">
			<fileset dir="lib" includes="${osgi.dependencies}" />
		</copy>
	</target>

	<target name="jar" depends="compile">
		<if>
			<not>
				<uptodate targetfile="${plugin.file}">
					<srcfiles dir="${osgi.plugin.classes.dir}" includes="**/*.*" />
				</uptodate>
			</not>
			<then>
				<manifest-helper />

				<bndexpand propertyfile="${sdk.dir}/common.bnd" />

				<bnd
					eclipse="false"
					exceptions="true"
					failok="false"
					inherit="true"
					output="${plugin.file}"
					sourcepath="."
				>
					<bndfiles path="bnd.bnd" />
					<classpath>
						<pathelement location="${osgi.plugin.classes.dir}" />
					</classpath>
				</bnd>
			</then>
		</if>
	</target>

	<target name="manifest">
		<if>
			<not>
				<available file="${osgi.plugin.classes.dir}/META-INF/MANIFEST.MF" />
			</not>
			<then>
				<manifest-helper analyze="true" />

				<mkdir dir="${osgi.plugin.classes.dir}/META-INF" />

				<tstamp>
					<format property="build.time" pattern="EEE MMM d HH:mm:ss z yyyy" />
				</tstamp>

				<manifest file="${osgi.plugin.classes.dir}/META-INF/MANIFEST.MF">
					<attribute name="Bundle-ManifestVersion" value="2" />
					<attribute name="Bundle-RequiredExecutionEnvironment" value="J2SE-1.5" />
					<attribute name="Bundle-Vendor" value="${release.info.vendor}" />
					<attribute name="Bundle-Version" value="${release.info.version}" />
					<attribute name="Export-Package" value="${export.packages}" />
					<attribute name="Import-Package" value="${import.packages}" />
					<attribute name="Javac-Compiler" value="${javac.compiler}" />
					<attribute name="Javac-Debug" value="${javac.debug}" />
					<attribute name="Javac-Deprecation" value="${javac.deprecation}" />
					<attribute name="Javac-Encoding" value="${javac.encoding}" />
				</manifest>

				<if>
					<and>
						<isset property="manifest.bundle.name" />
						<isset property="manifest.bundle.symbolic.name" />
					</and>
					<then>
						<manifest file="${osgi.plugin.classes.dir}/META-INF/MANIFEST.MF" mode="update">
							<attribute name="Bundle-Name" value="${manifest.bundle.name}" />
							<attribute name="Bundle-SymbolicName" value="${manifest.bundle.symbolic.name}" />
						</manifest>
					</then>
				</if>

				<if>
					<isset property="manifest.premain.class" />
					<then>
						<manifest file="${osgi.plugin.classes.dir}/META-INF/MANIFEST.MF" mode="update">
							<attribute name="Can-Redefine-Classes" value="${manifest.can.redefine.classes}" />
							<attribute name="Can-Retransform-Classes" value="${manifest.can.retransform.classes}" />
							<attribute name="Premain-Class" value="${manifest.premain.class}" />
						</manifest>
					</then>
				</if>
			</then>
		</if>
	</target>

	<target name="war">
		<antcall target="jar" />
	</target>
</project>
